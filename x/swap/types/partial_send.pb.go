// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: magicswap/swap/partial_send.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PartialSend struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Recipient     string     `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	SentAmount    types.Coin `protobuf:"bytes,3,opt,name=sentAmount,proto3" json:"sentAmount"`
	SwappedAmount types.Coin `protobuf:"bytes,4,opt,name=swappedAmount,proto3" json:"swappedAmount"`
	Creator       string     `protobuf:"bytes,5,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *PartialSend) Reset()         { *m = PartialSend{} }
func (m *PartialSend) String() string { return proto.CompactTextString(m) }
func (*PartialSend) ProtoMessage()    {}
func (*PartialSend) Descriptor() ([]byte, []int) {
	return fileDescriptor_62ba424868b7efb2, []int{0}
}
func (m *PartialSend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartialSend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartialSend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartialSend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartialSend.Merge(m, src)
}
func (m *PartialSend) XXX_Size() int {
	return m.Size()
}
func (m *PartialSend) XXX_DiscardUnknown() {
	xxx_messageInfo_PartialSend.DiscardUnknown(m)
}

var xxx_messageInfo_PartialSend proto.InternalMessageInfo

func (m *PartialSend) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PartialSend) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *PartialSend) GetSentAmount() types.Coin {
	if m != nil {
		return m.SentAmount
	}
	return types.Coin{}
}

func (m *PartialSend) GetSwappedAmount() types.Coin {
	if m != nil {
		return m.SwappedAmount
	}
	return types.Coin{}
}

func (m *PartialSend) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*PartialSend)(nil), "magicswap.swap.PartialSend")
}

func init() { proto.RegisterFile("magicswap/swap/partial_send.proto", fileDescriptor_62ba424868b7efb2) }

var fileDescriptor_62ba424868b7efb2 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0xbf, 0x4a, 0x03, 0x31,
	0x18, 0xbf, 0xd4, 0xaa, 0x34, 0xc5, 0x0e, 0xc1, 0xe1, 0x2c, 0x12, 0xab, 0x53, 0x41, 0x48, 0xac,
	0x3e, 0x80, 0xd8, 0xd2, 0x5d, 0xaa, 0x93, 0x8b, 0xe4, 0x72, 0xe1, 0x0c, 0x78, 0xf9, 0x42, 0x92,
	0x6a, 0x7d, 0x0b, 0x1f, 0xab, 0x63, 0x47, 0x17, 0x45, 0xee, 0x5e, 0x44, 0xee, 0xae, 0x5a, 0xdd,
	0x5c, 0x3e, 0x92, 0xef, 0xfb, 0xfd, 0xe3, 0x87, 0x8f, 0x73, 0x91, 0x69, 0xe9, 0x9f, 0x85, 0xe5,
	0xf5, 0xb0, 0xc2, 0x05, 0x2d, 0x1e, 0xef, 0xbd, 0x32, 0x29, 0xb3, 0x0e, 0x02, 0x90, 0xde, 0x0f,
	0x84, 0x55, 0xa3, 0xbf, 0x9f, 0x41, 0x06, 0xf5, 0x89, 0x57, 0xaf, 0x06, 0xd5, 0xa7, 0x12, 0x7c,
	0x0e, 0x9e, 0x27, 0xc2, 0x2b, 0xfe, 0x34, 0x4a, 0x54, 0x10, 0x23, 0x2e, 0x41, 0x9b, 0xe6, 0x7e,
	0xf2, 0x8e, 0x70, 0xf7, 0xba, 0x11, 0xbf, 0x51, 0x26, 0x25, 0x3d, 0xdc, 0xd2, 0x69, 0x8c, 0x06,
	0x68, 0xd8, 0x9e, 0xb5, 0x74, 0x4a, 0x0e, 0x71, 0xc7, 0x29, 0xa9, 0xad, 0x56, 0x26, 0xc4, 0xad,
	0x01, 0x1a, 0x76, 0x66, 0x9b, 0x05, 0xb9, 0xc4, 0xd8, 0x2b, 0x13, 0xae, 0x72, 0x98, 0x9b, 0x10,
	0x6f, 0x0d, 0xd0, 0xb0, 0x7b, 0x7e, 0xc0, 0x1a, 0x4b, 0x56, 0x59, 0xb2, 0xb5, 0x25, 0x9b, 0x80,
	0x36, 0xe3, 0xf6, 0xf2, 0xe3, 0x28, 0x9a, 0xfd, 0xa2, 0x90, 0x29, 0xde, 0xab, 0xc2, 0x5b, 0x95,
	0xae, 0x35, 0xda, 0xff, 0xd3, 0xf8, 0xcb, 0x22, 0x31, 0xde, 0x95, 0x4e, 0x89, 0x00, 0x2e, 0xde,
	0xae, 0x33, 0x7e, 0x7f, 0xc7, 0xd3, 0x65, 0x41, 0xd1, 0xaa, 0xa0, 0xe8, 0xb3, 0xa0, 0xe8, 0xb5,
	0xa4, 0xd1, 0xaa, 0xa4, 0xd1, 0x5b, 0x49, 0xa3, 0xbb, 0xd3, 0x4c, 0x87, 0x87, 0x79, 0xc2, 0x24,
	0xe4, 0xfc, 0x76, 0x31, 0x01, 0x67, 0xf5, 0xd9, 0x82, 0x6f, 0x7a, 0x5f, 0x34, 0xcd, 0x87, 0x17,
	0xab, 0x7c, 0xb2, 0x53, 0xb7, 0x75, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0x43, 0x45, 0x19, 0x50,
	0x98, 0x01, 0x00, 0x00,
}

func (m *PartialSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartialSend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartialSend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPartialSend(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.SwappedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPartialSend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.SentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPartialSend(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintPartialSend(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPartialSend(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPartialSend(dAtA []byte, offset int, v uint64) int {
	offset -= sovPartialSend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PartialSend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPartialSend(uint64(m.Id))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovPartialSend(uint64(l))
	}
	l = m.SentAmount.Size()
	n += 1 + l + sovPartialSend(uint64(l))
	l = m.SwappedAmount.Size()
	n += 1 + l + sovPartialSend(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPartialSend(uint64(l))
	}
	return n
}

func sovPartialSend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPartialSend(x uint64) (n int) {
	return sovPartialSend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PartialSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartialSend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartialSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartialSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartialSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartialSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartialSend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartialSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwappedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartialSend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPartialSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwappedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPartialSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPartialSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartialSend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPartialSend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartialSend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartialSend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartialSend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPartialSend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPartialSend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPartialSend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPartialSend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartialSend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPartialSend = fmt.Errorf("proto: unexpected end of group")
)
