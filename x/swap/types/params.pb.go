// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: magicswap/swap/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	// SwapRule defines the swap rule constraints.
	SwapRules []SwapRule `protobuf:"bytes,1,rep,name=swap_rules,json=swapRules,proto3" json:"swap_rules"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b7e1740379cba3e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSwapRules() []SwapRule {
	if m != nil {
		return m.SwapRules
	}
	return nil
}

// SwapRule defines the token mapping
// between the source and destination token.
type SwapRule struct {
	// source denom
	// the source token to be burned or sent
	SrcDenom string `protobuf:"bytes,1,opt,name=src_denom,json=srcDenom,proto3" json:"src_denom,omitempty"`
	// destination denom
	// the destination token to be minted
	DstDenom string `protobuf:"bytes,2,opt,name=dst_denom,json=dstDenom,proto3" json:"dst_denom,omitempty"`
	// burn ratio
	// the ratio of the source token to be burned
	Ratio cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=ratio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"ratio"`
	// minimum supply ratio limit
	// if the supply ratio is less than this value, the swap will be rejected
	MinSupplyRatioLimit cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=min_supply_ratio_limit,json=minSupplyRatioLimit,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"min_supply_ratio_limit"`
}

func (m *SwapRule) Reset()         { *m = SwapRule{} }
func (m *SwapRule) String() string { return proto.CompactTextString(m) }
func (*SwapRule) ProtoMessage()    {}
func (*SwapRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b7e1740379cba3e, []int{1}
}
func (m *SwapRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapRule.Merge(m, src)
}
func (m *SwapRule) XXX_Size() int {
	return m.Size()
}
func (m *SwapRule) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapRule.DiscardUnknown(m)
}

var xxx_messageInfo_SwapRule proto.InternalMessageInfo

func (m *SwapRule) GetSrcDenom() string {
	if m != nil {
		return m.SrcDenom
	}
	return ""
}

func (m *SwapRule) GetDstDenom() string {
	if m != nil {
		return m.DstDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "magicswap.swap.Params")
	proto.RegisterType((*SwapRule)(nil), "magicswap.swap.SwapRule")
}

func init() { proto.RegisterFile("magicswap/swap/params.proto", fileDescriptor_8b7e1740379cba3e) }

var fileDescriptor_8b7e1740379cba3e = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x33, 0xf7, 0xea, 0xe5, 0x66, 0x04, 0xc1, 0x28, 0x1a, 0x6f, 0x21, 0x2d, 0x75, 0x53,
	0xaa, 0x26, 0xa2, 0xe0, 0xa2, 0xcb, 0x58, 0x77, 0x15, 0x24, 0xed, 0xca, 0x4d, 0x98, 0x4e, 0x86,
	0x74, 0x68, 0xe6, 0x0f, 0x99, 0x09, 0x6d, 0x5f, 0xc1, 0x95, 0x8f, 0xe0, 0xd2, 0x8d, 0xd0, 0x85,
	0x0f, 0xd1, 0x65, 0x71, 0x25, 0x2e, 0x8a, 0xb4, 0x8b, 0xfa, 0x18, 0x32, 0x99, 0xd4, 0x3f, 0xb8,
	0xbc, 0x9b, 0x43, 0xce, 0xf7, 0x85, 0xdf, 0x39, 0xe7, 0x1b, 0xd8, 0x62, 0x28, 0xa7, 0x58, 0x2d,
	0x90, 0x8c, 0xea, 0x22, 0x51, 0x89, 0x98, 0x0a, 0x65, 0x29, 0xb4, 0xf0, 0x6e, 0xff, 0x36, 0x43,
	0x53, 0xae, 0xee, 0x20, 0x46, 0xb9, 0x88, 0xea, 0x6a, 0x7f, 0xb9, 0x7a, 0x88, 0x85, 0x62, 0x42,
	0xa5, 0x75, 0x17, 0xd9, 0xa6, 0xb1, 0xee, 0xe5, 0x22, 0x17, 0x56, 0x37, 0x5f, 0x56, 0xed, 0x72,
	0x78, 0xf1, 0xb6, 0x9e, 0xe1, 0xc5, 0x10, 0x1a, 0x6a, 0x5a, 0x56, 0x05, 0x51, 0x3e, 0xe8, 0x9c,
	0xf7, 0x6e, 0x3d, 0xf7, 0xc3, 0x7f, 0x47, 0x86, 0xe3, 0x05, 0x92, 0x49, 0x55, 0x90, 0xd8, 0xdd,
	0xec, 0xda, 0xce, 0xa7, 0xe3, 0xba, 0x0f, 0x12, 0x57, 0x35, 0xa2, 0x1a, 0x74, 0x7e, 0x7e, 0x6c,
	0x83, 0xf7, 0xc7, 0x75, 0xff, 0xc1, 0x9f, 0x3b, 0x96, 0xf6, 0x12, 0x3b, 0xa5, 0xfb, 0xf9, 0x0c,
	0x5e, 0x9e, 0x20, 0x5e, 0x0b, 0xba, 0xaa, 0xc4, 0x69, 0x46, 0xb8, 0x60, 0x3e, 0xe8, 0x80, 0x9e,
	0x9b, 0x5c, 0xaa, 0x12, 0x0f, 0x4d, 0x6f, 0xcc, 0x4c, 0xe9, 0xc6, 0x3c, 0xb3, 0x66, 0xa6, 0xb4,
	0x35, 0x47, 0xf0, 0x66, 0x89, 0x34, 0x15, 0xfe, 0xb9, 0x31, 0xe2, 0x97, 0x66, 0x9b, 0xef, 0xbb,
	0x76, 0xcb, 0x5e, 0xac, 0xb2, 0x79, 0x48, 0x45, 0xc4, 0x90, 0x9e, 0x85, 0x23, 0x92, 0x23, 0xbc,
	0x1a, 0x12, 0xfc, 0xf5, 0xcb, 0x53, 0xd8, 0x04, 0x32, 0x24, 0xd8, 0xae, 0x6e, 0x21, 0xde, 0x1c,
	0xde, 0x67, 0x94, 0xa7, 0xaa, 0x92, 0xb2, 0x58, 0xa5, 0xb5, 0x96, 0x16, 0x94, 0x51, 0xed, 0xdf,
	0xb8, 0x16, 0xfe, 0x2e, 0xa3, 0x7c, 0x5c, 0x43, 0x13, 0xc3, 0x1c, 0x19, 0xe4, 0xe0, 0xc9, 0x29,
	0xa3, 0x47, 0x94, 0x2b, 0x8d, 0xb8, 0xfe, 0x3b, 0x25, 0x13, 0xcd, 0x44, 0xcc, 0x09, 0x7f, 0x83,
	0xa4, 0xa4, 0x3c, 0x8f, 0x5f, 0x6f, 0xf6, 0x01, 0xd8, 0xee, 0x03, 0xf0, 0x63, 0x1f, 0x80, 0x0f,
	0x87, 0xc0, 0xd9, 0x1e, 0x02, 0xe7, 0xdb, 0x21, 0x70, 0xde, 0x3d, 0xce, 0xa9, 0x9e, 0x55, 0xd3,
	0x10, 0x0b, 0x16, 0x4d, 0x96, 0xaf, 0x44, 0x29, 0xe9, 0xb3, 0x65, 0xf4, 0x5f, 0xee, 0x7a, 0x25,
	0x89, 0x9a, 0x5e, 0xd4, 0xaf, 0xfd, 0xe2, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x8f, 0xa2,
	0x04, 0x60, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SwapRules) != len(that1.SwapRules) {
		return false
	}
	for i := range this.SwapRules {
		if !this.SwapRules[i].Equal(&that1.SwapRules[i]) {
			return false
		}
	}
	return true
}
func (this *SwapRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SwapRule)
	if !ok {
		that2, ok := that.(SwapRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SrcDenom != that1.SrcDenom {
		return false
	}
	if this.DstDenom != that1.DstDenom {
		return false
	}
	if !this.Ratio.Equal(that1.Ratio) {
		return false
	}
	if !this.MinSupplyRatioLimit.Equal(that1.MinSupplyRatioLimit) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapRules) > 0 {
		for iNdEx := len(m.SwapRules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapRules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SwapRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinSupplyRatioLimit.Size()
		i -= size
		if _, err := m.MinSupplyRatioLimit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DstDenom) > 0 {
		i -= len(m.DstDenom)
		copy(dAtA[i:], m.DstDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DstDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SrcDenom) > 0 {
		i -= len(m.SrcDenom)
		copy(dAtA[i:], m.SrcDenom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.SrcDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SwapRules) > 0 {
		for _, e := range m.SwapRules {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *SwapRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SrcDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.DstDenom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.Ratio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinSupplyRatioLimit.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapRules = append(m.SwapRules, SwapRule{})
			if err := m.SwapRules[len(m.SwapRules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSupplyRatioLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSupplyRatioLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
